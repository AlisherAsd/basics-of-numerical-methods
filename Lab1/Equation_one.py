
# Для уравнения 1 (Модифицированный Ньютон):

# Определяем функцию f(x) = x^4 - 18x - 10
def f(x):
    return x**4 - 18*x - 10

# Определяем производную функции f'(x) = 4x^3 - 18
def df(x):
    return 4*x**3 - 18

# Задаем начальное приближение
x0 = 2.5
# Вычисляем производную в начальной точке
df_x0 = df(x0)
# Задаем точность вычисления
tol = 1e-6
# Максимальное количество итераций
max_iter = 100

# Метод Ньютона для поиска корня
for i in range(max_iter):
    # Вычисляем значение функции в текущей точке
    fx = f(x0)
    # Находим следующее приближение по формуле Ньютона
    x_new = x0 - fx / df_x0
    # Проверяем условие сходимости
    if abs(x_new - x0) < tol:
        break
    # Обновляем текущее приближение
    x0 = x_new

# Выводим результат
print(f"Корень: {x_new}, Итерации: {i+1}")